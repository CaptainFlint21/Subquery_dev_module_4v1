{"version":3,"file":"publish-controller.js","sourceRoot":"","sources":["../../src/controller/publish-controller.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2021 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport fs from 'fs';\nimport path from 'path';\nimport {loadProjectManifest, manifestIsV0_2_0, ProjectManifestV0_2_0Impl, isCustomDs} from '@subql/common';\nimport {FileReference} from '@subql/types';\nimport IPFS from 'ipfs-http-client';\nimport yaml from 'js-yaml';\nimport {runWebpack} from './build-controller';\n\n// https://github.com/ipfs/js-ipfs/blob/master/docs/core-api/FILES.md#filecontent\ntype FileContent = Uint8Array | string | Iterable<Uint8Array> | Iterable<number> | AsyncIterable<Uint8Array>;\n\n// https://github.com/ipfs/js-ipfs/blob/master/docs/core-api/FILES.md#fileobject\ntype FileObject = {\n  path?: string;\n  content?: FileContent;\n  mode?: number | string;\n  mtime?: Date | number[] | {secs: number; nsecs?: number};\n};\n\nexport async function uploadToIpfs(ipfsEndpoint: string, projectDir: string): Promise<string> {\n  const ipfs = IPFS.create({url: ipfsEndpoint});\n\n  const projectManifestPath = path.resolve(projectDir, 'project.yaml');\n  const manifest = loadProjectManifest(projectManifestPath).asImpl;\n\n  if (!manifestIsV0_2_0(manifest)) {\n    throw new Error('Unsupported project manifest spec, only 0.2.0 is supported');\n  }\n\n  const deployment = await replaceFileReferences(ipfs, projectDir, manifest);\n\n  // Upload schema\n  return uploadFile(ipfs, deployment.toDeployment());\n}\n\n/* Recursively finds all FileReferences in an object and replaces the files with IPFS references */\nasync function replaceFileReferences<T>(ipfs: IPFS.IPFSHTTPClient, projectDir: string, input: T): Promise<T> {\n  if (Array.isArray(input)) {\n    return (await Promise.all(input.map((val) => replaceFileReferences(ipfs, projectDir, val)))) as unknown as T;\n  } else if (typeof input === 'object') {\n    if (input instanceof Map) {\n      input = mapToObject(input) as T;\n    }\n\n    if (isFileReference(input)) {\n      input.file = await uploadFile(ipfs, fs.createReadStream(path.resolve(projectDir, input.file))).then(\n        (cid) => `ipfs://${cid}`\n      );\n    }\n\n    const keys = Object.keys(input) as unknown as (keyof T)[];\n    await Promise.all(\n      keys.map(async (key) => {\n        input[key] = await replaceFileReferences(ipfs, projectDir, input[key]);\n      })\n    );\n  }\n\n  return input;\n}\n\nasync function uploadFile(ipfs: IPFS.IPFSHTTPClient, content: FileObject | FileContent): Promise<string> {\n  const result = await ipfs.add(content, {pin: true, cidVersion: 0});\n  return result.cid.toString();\n}\n\nfunction toMinifiedYaml(manifest: ProjectManifestV0_2_0Impl): string {\n  return yaml.dump(manifest, {\n    sortKeys: true,\n    condenseFlow: true,\n  });\n}\n\nfunction mapToObject(map: Map<string | number, unknown>): Record<string | number, unknown> {\n  // XXX can use Object.entries with newer versions of node.js\n  const assetsObj: Record<string, unknown> = {};\n  for (const key of map.keys()) {\n    assetsObj[key] = map.get(key);\n  }\n\n  return assetsObj;\n}\n\nfunction isFileReference(value: any): value is FileReference {\n  return value.file && typeof value.file === 'string';\n}\n"]}