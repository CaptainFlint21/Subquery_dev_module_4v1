"use strict";
// Copyright 2020-2021 OnFinality Limited authors & contributors
// SPDX-License-Identifier: Apache-2.0
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findAvailablePort = exports.isRuntimeDs = exports.isCustomDs = exports.isCallHandlerProcessor = exports.isEventHandlerProcessor = exports.isBlockHandlerProcessor = void 0;
const types_1 = require("@subql/types");
const detect_port_1 = __importDefault(require("detect-port"));
function isBlockHandlerProcessor(hp) {
    return hp.baseHandlerKind === types_1.SubqlHandlerKind.Block;
}
exports.isBlockHandlerProcessor = isBlockHandlerProcessor;
function isEventHandlerProcessor(hp) {
    return hp.baseHandlerKind === types_1.SubqlHandlerKind.Event;
}
exports.isEventHandlerProcessor = isEventHandlerProcessor;
function isCallHandlerProcessor(hp) {
    return hp.baseHandlerKind === types_1.SubqlHandlerKind.Call;
}
exports.isCallHandlerProcessor = isCallHandlerProcessor;
function isCustomDs(ds) {
    return ds.kind !== types_1.SubqlDatasourceKind.Runtime && !!ds.processor;
}
exports.isCustomDs = isCustomDs;
function isRuntimeDs(ds) {
    return ds.kind === types_1.SubqlDatasourceKind.Runtime;
}
exports.isRuntimeDs = isRuntimeDs;
async function findAvailablePort(startPort, range = 10) {
    for (let port = startPort; port <= startPort + range; port++) {
        try {
            const _port = await (0, detect_port_1.default)(port);
            if (_port === port) {
                return port;
            }
        }
        catch (e) {
            return null;
        }
    }
    return null;
}
exports.findAvailablePort = findAvailablePort;
//# sourceMappingURL=utils.js.map